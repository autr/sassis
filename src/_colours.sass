@function str-replace($string, $search, $replace: '')
	$index: str-index($string, $search)
	@if $index
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace)
	@return $string

@function encode-svg($svg)
	$encoded: ''
	$slice: 2000
	$index: 0
	$loops: ceil(str-length($svg) / $slice)

	@for $i from 1 through $loops
		$chunk: str-slice($svg, $index, $index + $slice - 1)
		$chunk: str-replace($chunk, '"', "%22")
		$chunk: str-replace($chunk, '<', '%3C')
		$chunk: str-replace($chunk, '>', '%3E')
		$chunk: str-replace($chunk, '&', '%26')
		$chunk: str-replace($chunk, '#', '%23')
		$chunk: str-replace($chunk, ',', '%2C')
		$chunk: str-replace($chunk, '=', '%3D')
		$chunk: str-replace($chunk, " ", '%20')
		$chunk: str-replace($chunk, "/", '%2F')
		$chunk: str-replace($chunk, ":", '%3A')
		$encoded: #{$encoded}#{$chunk}
		$index: $index + $slice
	@return url("data:image/svg+xml, #{$encoded}")

@function invert-color($hue, $sat: 95%, $light: 70%, $inv: false)
	@if $inv
		@return hsl( $hue, $sat, 100% - $light )
	@else
		@return hsl( $hue, $sat, $light )


=set-prop( $prop, $c, $s: '' )
	@if $s == ''
		#{$prop}: $c
	@else
		#{$s}
			#{$prop}: $c


@function counterpoint( $a )
	$b: adjust-hue( invert($a), 180 )
	$diff: lightness($a) - lightness($b)
	$off: $diff
	@if $off < 0
		$off: ( $off * -1 )
	$off: 100 - $off
	$light: lightness( $a )
	$amt: 0.5
	@if $light >= 50 
		$b: darken( $b, $off * 0.25 )
	@else
		$b: lighten( $b, $off * 0.25 )
	// @debug $off $light
	@return $b

=bg( $c, $n: '' ) 
	$raw: ''
	@if $n != ''
		@for $i from 1 through length($n)
			$name: nth($n, $i)
			$raw: #{$raw + '.' + $name}
			@if $i != length($n)
				$raw: #{$raw + ', '}

	+set-prop( background-color, $c, $raw )

=colors( $c, $bg, $n: '') 
	$s: ''
	$raw: ''
	@if $n != ''
		@for $i from 1 through length($n)
			$name: nth($n, $i)
			$s: #{$s + '&.' + $name}
			$raw: #{$raw + '.' + $name}
			@if $i != length($n)
				$s: #{$s + ', '}
				$raw: #{$raw + ', '}

	+set-prop( color, $c, $raw )
	+set-prop( border-color, $c, $raw ) 
	*
		+set-prop( border-color, $c, $raw ) 

	.cross
		background-image:  encode-svg( "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' preserveAspectRatio='none'><line x1='0' y1='0' x2='100' y2='100' stroke='#{$c}' stoke-width='1' vector-effect='non-scaling-stroke' /><line x1='100' y1='0' x2='0' y2='100' stroke='#{$c}' stoke-width='1' vector-effect='non-scaling-stroke' /></svg>")
	.arrow
		background-image:  encode-svg( "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 50' preserveAspectRatio='none'><polyline points='10,10 50,40 90,10' stroke='#{$c}' stoke-width='1' vector-effect='non-scaling-stroke' /></svg>")


	// colors... 

	h1, h2, h3, h4, h5, h6
		+set-prop( color, $c, $s )

	input, select, textarea, input[type=range], textarea
		+set-prop(color, $c, $s )

	input, textarea, select
		&:focus
			+set-prop(box-shadow, 0px 0px 0px 2px $c inset, $s )

	input, textarea, input[type=range], textarea
		+set-prop(border-color, $c, $s )
	input[type=range]::-webkit-slider-thumb
		+set-prop(background, $c, $s )
	.fill
		+set-prop(fill, $c, $s )
	.stroke
		+set-prop(stroke, $c, $s )



	.checkbox
		input[type=checkbox] + span
			+set-prop(border-color, $c, $s )
			&:before, &:after
				+set-prop(border-color, $c, $s )
	.select, .chevron
		&:after
			+set-prop(border-color, $c, $s )
	.edged
		+set-prop( box-shadow, 0px 0px 0px 1px inset, $s)
	.filled, a:active, button:active
		+set-prop(background, $c, $s )
		+set-prop(color, $bg, $s )
		.fill
			+set-prop(fill, $bg, $s )
		.stroke
			+set-prop(stroke, $bg, $s )
		&:after, &:before
			+set-prop(border-color, $bg, $s )
	.filled:active
		+set-prop(background, transparent, $s )
		+set-prop(color, $c, $s )


	a, select, button
		+set-prop(color, $c, $s )
		+set-prop(border-color, $c, $s )
	button
		+set-prop(border-color, $c, $s )
		+set-prop(color, $c, $s ) 
